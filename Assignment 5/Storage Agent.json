{
  "name": "Storage Agent",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "cleaned_text"
            },
            {
              "name": "summary"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -840,
        -680
      ],
      "id": "941b023a-bbbd-4e25-a1fb-de9cc34f8ffc",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "jsCode": "const cleanedText = $json.cleaned_text;\nconst summaryText = $json.summary;\n\nconst chunkSize = 1000;\nconst chunkOverlap = 200;\n\nconst documentsToProcess = [];\n\nif (cleanedText) {\n  documentsToProcess.push({\n    pageContent: cleanedText,\n    metadata: { type: 'full_text' }\n  });\n}\n\nif (summaryText) {\n  documentsToProcess.push({\n    pageContent: summaryText,\n    metadata: { type: 'summary' }\n  });\n}\n\nconst finalChunks = [];\n\nfor (const doc of documentsToProcess) {\n  const text = doc.pageContent;\n  if (!text) continue;\n\n  for (let i = 0; i < text.length; i += chunkSize - chunkOverlap) {\n    const chunk = text.substring(i, i + chunkSize);\n    finalChunks.push({\n      pageContent: chunk,\n      metadata: doc.metadata,\n    });\n  }\n}\n\nreturn finalChunks;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -620,
        -680
      ],
      "id": "cbe53f5d-8d0d-4113-8543-a0b03e9c5d37",
      "name": "Loading and Splitting Data"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.cohere.com/v1/embed",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{$credentials.cohereApi.apiKey}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"texts\": {{ $json.map(item => item.pageContent) }},\n  \"model\": \"embed-english-v3.0\",\n  \"input_type\": \"search_document\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -380,
        -680
      ],
      "id": "927e4afd-0a3b-42a6-88fe-f31585959e9a",
      "name": "HTTP Request",
      "credentials": {
        "httpHeaderAuth": {
          "id": "b93f2CyWx9G2Rhht",
          "name": "Cohere Auth"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the chunks from the FIRST Code node\nconst chunks = $('Loading and Splitting Data').all();\n// Get the embeddings from the HTTP Request node\nconst embeddings = $json.embeddings;\n\n// Make sure we have the same number of chunks and embeddings\nif (chunks.length !== embeddings.length) {\n  throw new Error(\"Mismatch between number of chunks and embeddings.\");\n}\n\n// Combine them into the format Supabase needs\nconst itemsForSupabase = chunks.map((chunk, index) => {\n  return {\n    json: {\n      content: chunk.json.pageContent, // The original text\n      embedding: embeddings[index], // The corresponding vector\n      metadata: chunk.json.metadata // The original metadata\n    }\n  }\n});\n\nreturn itemsForSupabase;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -200,
        -680
      ],
      "id": "36059a77-44a5-41de-936a-16259f553efd",
      "name": "Combine Data"
    },
    {
      "parameters": {
        "tableId": "ai_data_store",
        "dataToSend": "autoMapInputData"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        0,
        -680
      ],
      "id": "a4cee008-44c9-4b4c-8366-a5bef29a374b",
      "name": "Create a row",
      "credentials": {
        "supabaseApi": {
          "id": "MeYoMC0mNya3m3CG",
          "name": "Supabase account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Loading and Splitting Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loading and Splitting Data": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Combine Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Data": {
      "main": [
        [
          {
            "node": "Create a row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b26146a6-1d28-42ec-840a-f7872fe01ad1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "51a151c4e3546fae824ae7435d95ab6051d3b64260145986af6d7ce41347cf96"
  },
  "id": "4U2SmS2X5e3urlNH",
  "tags": []
}